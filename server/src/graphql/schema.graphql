type Query {
  user(id: String!): User
  recipes(): [Recipe!]!
}

type Review {
  stars: Int! # should this just be 1-10?
  description: String # can be just a star review
  date: String!
  reviewerId: String!
  upvotes: Int!
}

type NutritionInfo {
  calories: Int! # all per serving and optional
  totalFat: Int # g
  saturatedFat: Int # g
  cholesterol: Int # mg
  sodium: Int # mg
  carbs: Int # g
  dietaryFiber: Int # g
  protein: Int # g
  sugar: Int # g

  # maybe do vitamins and minerals
}

type PrepInfo {
  prep: Int!
  cook: Int!
  readyIn: Int!
  servings: Int!
}

type Recipe {
  authorId: String!
  reviews: [Review!]!
  photos: [String!]!

  name: String!
  description: String!

  groceryItemIds: [String!]! # how will we implement this, a search? will string represent ingredient id?

  nutritionInfo: NutritionInfo!

  prepInfo: PrepInfo!

  directions: [String!]!
}


type DietPreferences {
  meat: Boolean
  dairy: Boolean
  eggs: Boolean
  lowSugar: Boolean
  lowCarb: Boolean
  lowFat: Boolean
}

type User {
  id: String!
  profileImg: String
  username: String!
  email: String!

  recipeIds: [String!]!
}

type Auth {
  user: User!
}

type Void {
  id: String!
}

type Mutation {
  # should these even be here?
  register(username: String!, password: String!, email: String!): Auth!
  login(email: String!, password: String!): Auth!
  loginWithCookie: Auth!
  logout: Void!
}
